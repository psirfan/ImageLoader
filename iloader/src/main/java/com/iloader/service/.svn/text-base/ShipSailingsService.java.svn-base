package com.honda.eu.hum.reversekd.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.honda.eu.hum.reversekd.bo.ShipSailings;
import com.honda.eu.hum.reversekd.bo.ShippingSchedule;
import com.honda.eu.hum.reversekd.dao.Txoesh1;
import com.honda.eu.hum.reversekd.dao.Txoesh1Id;
import com.honda.eu.hum.reversekd.dto.Sailing;

@Controller
@EnableTransactionManagement
@RequestMapping(value = "/ShipSailings")
public class ShipSailingsService {

	@Autowired
	ShipSailings shipSailings;

	static Logger log = Logger.getRootLogger();

	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody
	ServiceResponse getSailings() {

		Object[] returnedValues;
		ServiceResponse sr = new ServiceResponse();

		List<Sailing> returnedValuesList = shipSailings.getSailings();

		returnedValues = returnedValuesList.toArray();
		sr.setReturnedValues(returnedValues);
		sr.setMessage("Data processed successfully");
		sr.setReturnCode(1);
		return sr;
	}

	@RequestMapping(method = RequestMethod.PUT)
	public @ResponseBody
	ServiceResponse addSailing(
			@RequestParam(value = "vessel", required = false, defaultValue = "**NONE**") String vessel,
			@RequestParam(value = "departDate", required = false, defaultValue = "**NONE**") Date departDate,
			@RequestParam(value = "pod", required = false, defaultValue = "**NONE**") String pod,
			@RequestParam(value = "arrivalDate", required = false, defaultValue = "**NONE**") Date arrivalDate,
			@RequestParam(value = "poa", required = false, defaultValue = "**NONE**") String poa) {

		Object[] returnedValues;
		ServiceResponse sr = new ServiceResponse();

		shipSailings.add(vessel, departDate, pod, arrivalDate, poa);

		returnedValues = null;
		sr.setReturnedValues(returnedValues);
		sr.setMessage("Data processed successfully");
		sr.setReturnCode(1);
		return sr;
	}

	@RequestMapping(method = RequestMethod.DELETE)
	public @ResponseBody
	ServiceResponse deleteSailing(
			@RequestParam(value = "vessel", required = false, defaultValue = "**NONE**") String vessel,
			@RequestParam(value = "departDate", required = false, defaultValue = "**NONE**") Date departDate,
			//@RequestParam(value = "departDate", required = false, defaultValue = "**NONE**") String departDate,
			@RequestParam(value = "pod", required = false, defaultValue = "**NONE**") String pod,
			@RequestParam(value = "arrivalDate", required = false, defaultValue = "**NONE**") Date arrivalDate,
			//@RequestParam(value = "arrivalDate", required = false, defaultValue = "**NONE**") String arrivalDate,
			@RequestParam(value = "poa", required = false, defaultValue = "**NONE**") String poa) {

		Object[] returnedValues;
		ServiceResponse sr = new ServiceResponse();

		shipSailings.delete(vessel, departDate, pod, arrivalDate, poa);
		
		returnedValues = null;
		sr.setReturnedValues(returnedValues);
		sr.setMessage("Data processed successfully");
		sr.setReturnCode(1);
		return sr;
	}
}