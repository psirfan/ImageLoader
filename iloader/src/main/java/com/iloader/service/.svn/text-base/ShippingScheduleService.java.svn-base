package com.honda.eu.hum.reversekd.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.honda.eu.hum.reversekd.bo.ShippingSchedule;
import com.honda.eu.hum.reversekd.dao.Txoesh1Id;
import com.honda.eu.hum.reversekd.dao.Txossd1Id;
import com.honda.eu.hum.reversekd.dto.ShippingScheduleOrderAllocate;
import com.honda.eu.hum.reversekd.dto.ShippingScheduleOrderDetail;


@Controller
@EnableTransactionManagement  
@RequestMapping(value = "/ShippingScheduleService")
public class ShippingScheduleService {

	@Autowired
	ShippingSchedule shippingSchedule;
	
	@RequestMapping(value = "/ShippingScheduleLoad", method = RequestMethod.POST)
	public @ResponseBody ServiceResponse uploadFile(FileUploadForm uploadForm) {

		List returnedValuesList = new ArrayList();
		Object[] returnedValues;
    	ServiceResponse sr = new ServiceResponse();
		
		CommonsMultipartFile[] files = uploadForm.getFiles();
		if (files != null && files.length != 0) {
			for (MultipartFile file : files) {
				System.out.println(file.getOriginalFilename());
				returnedValuesList.add("Processing file "+file.getOriginalFilename());
				
				// Call business object to process file 
				if ( shippingSchedule.loadScheduleFile(file,uploadForm.isReplace()))
				{
			    	sr.setMessage("Schedule load processed successfully");
			    	returnedValuesList.addAll(shippingSchedule.getMessages());
			    	sr.setReturnCode(1);
			    	returnedValues = returnedValuesList.toArray();
			    	sr.setReturnedValues(returnedValues);
			    	return sr;		
				}
				else
				{
			    	sr.setMessage("Schedule load failed");
			    	sr.setReturnCode(0);
			    	returnedValuesList.addAll(shippingSchedule.getMessages());
			    	returnedValues = returnedValuesList.toArray();
			    	sr.setReturnedValues(returnedValues);
			    	return sr;		
				}
				
			}
		}
		
    	sr.setMessage("Schedule load failed - no file processed");
    	sr.setReturnCode(0);
    	return sr;		
		
	}
	
	@RequestMapping(value = "/ShippingScheduleOrderDetails", method = RequestMethod.GET)
	public @ResponseBody ServiceResponse shippingScheduleOrderDetails(
			@RequestParam(value = "importCompany", required = false, defaultValue = "*") String importCompany,
			@RequestParam(value = "exportCompany", required = false, defaultValue = "*") String exportCompany,
			@RequestParam(value = "showAllocated", required = false, defaultValue = "false") String showAllocated,
			@RequestParam(value = "showUnallocated", required = false, defaultValue = "false") String showUnallocated
			) {

		List<ShippingScheduleOrderDetail> returnedValuesList = null;
		Object[] returnedValues;
    	ServiceResponse sr = new ServiceResponse();
    	if ( importCompany.contains("undefined")) importCompany = "%";
    	if ( exportCompany.contains("undefined")) exportCompany = "%";
		
    	returnedValuesList = shippingSchedule.getOrderDetail(importCompany, exportCompany, showAllocated, showUnallocated);
    	
    	returnedValues = returnedValuesList.toArray();
    	sr.setReturnedValues(returnedValues);
    	sr.setMessage("Data processed successfully");
    	sr.setReturnCode(1);
    	return sr;		
		
	}
	
	@RequestMapping(value = "/AllocateOrders", method = RequestMethod.POST)
	public @ResponseBody ServiceResponse allocateOrderDetails(
    		@RequestBody ShippingScheduleOrderAllocate data) {
    		//@RequestBody Txoesh1Id sailing) {

		List<ShippingScheduleOrderDetail> returnedValuesList = null;
		Object[] returnedValues;
    	ServiceResponse sr = new ServiceResponse();
    	if ( !shippingSchedule.allocateOrders(data.getSailing(), data.getOrders(),data.getPurchaseContract()))
    	{
        	sr.setMessage("Shipping schedule update failed");
        	sr.setReturnCode(0);
        	return sr;		
    	}
    	
    	returnedValues = null;
    	sr.setReturnedValues(returnedValues);
    	sr.setMessage("Data processed successfully");
    	sr.setReturnCode(1);
    	return sr;		
		
	}
	
	@RequestMapping(value = "/DeallocateOrders", method = RequestMethod.POST)
	public @ResponseBody ServiceResponse deallocateOrderDetails(
    		@RequestBody ShippingScheduleOrderAllocate data) {
    		//@RequestBody Txoesh1Id sailing) {

		List<ShippingScheduleOrderDetail> returnedValuesList = null;
		Object[] returnedValues;
    	ServiceResponse sr = new ServiceResponse();
    	if ( !shippingSchedule.deallocateOrders(data.getSailing(), data.getOrders()))
    	{
        	sr.setMessage("Shipping schedule update failed");
        	sr.setReturnCode(0);
        	return sr;		
    	}
    	
    	returnedValues = null;
    	sr.setReturnedValues(returnedValues);
    	sr.setMessage("Data processed successfully");
    	sr.setReturnCode(1);
    	return sr;		
		
	}
}